// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WellnessTracker.Models;

namespace WellnessTracker.Migrations
{
    [DbContext(typeof(EntryContext))]
    [Migration("20201207162808_AddedSeedDataCategory")]
    partial class AddedSeedDataCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WellnessTracker.Models.Allergen", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ID");

                    b.ToTable("allergen");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            Name = "Egg"
                        },
                        new
                        {
                            ID = -2,
                            Name = "Milk"
                        },
                        new
                        {
                            ID = -3,
                            Name = "Tree Nuts"
                        },
                        new
                        {
                            ID = -4,
                            Name = "Shellfish"
                        },
                        new
                        {
                            ID = -5,
                            Name = "Soy"
                        },
                        new
                        {
                            ID = -6,
                            Name = "Wheat"
                        },
                        new
                        {
                            ID = -7,
                            Name = "Peanut"
                        },
                        new
                        {
                            ID = -8,
                            Name = "Seeds"
                        },
                        new
                        {
                            ID = -9,
                            Name = "Fish"
                        },
                        new
                        {
                            ID = -10,
                            Name = "Gluten"
                        });
                });

            modelBuilder.Entity("WellnessTracker.Models.Allergen_Entry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<int>("AllergenID")
                        .HasColumnType("int(10)");

                    b.Property<int>("EntryID")
                        .HasColumnType("int(10)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bool");

                    b.HasKey("ID");

                    b.HasIndex("AllergenID")
                        .HasName("FK_Allergen_Allergen_Entry");

                    b.HasIndex("EntryID")
                        .HasName("FK_Entry_Allergen_Entry");

                    b.ToTable("Allergen_Entry");
                });

            modelBuilder.Entity("WellnessTracker.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<bool>("IsDiabetic")
                        .HasColumnType("bool");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ID");

                    b.ToTable("category");

                    b.HasData(
                        new
                        {
                            ID = -5,
                            IsDiabetic = false,
                            Name = "Meal"
                        },
                        new
                        {
                            ID = -4,
                            IsDiabetic = false,
                            Name = "Exercise"
                        },
                        new
                        {
                            ID = -3,
                            IsDiabetic = false,
                            Name = "Event"
                        },
                        new
                        {
                            ID = -2,
                            IsDiabetic = true,
                            Name = "BG Reading"
                        },
                        new
                        {
                            ID = -1,
                            IsDiabetic = true,
                            Name = "Insulin Injection"
                        });
                });

            modelBuilder.Entity("WellnessTracker.Models.Entry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<double>("BG")
                        .HasColumnType("double(5, 1)");

                    b.Property<int>("Carbs")
                        .HasColumnType("int(4)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int(10)");

                    b.Property<int>("ExerciseLength")
                        .HasColumnType("int(3)");

                    b.Property<int>("Fats")
                        .HasColumnType("int(4)");

                    b.Property<double>("Insulin")
                        .HasColumnType("double(5, 1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bool");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("Protein")
                        .HasColumnType("int(4)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int(10)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID")
                        .HasName("FK_Category_Entry");

                    b.HasIndex("StatusID")
                        .HasName("FK_Status_Entry");

                    b.HasIndex("UserID")
                        .HasName("FK_User_Entry");

                    b.ToTable("entry");
                });

            modelBuilder.Entity("WellnessTracker.Models.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("bool");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ID");

                    b.ToTable("status");

                    b.HasData(
                        new
                        {
                            ID = -10,
                            IsPositive = true,
                            Name = "Normal"
                        },
                        new
                        {
                            ID = -9,
                            IsPositive = true,
                            Name = "Happy"
                        },
                        new
                        {
                            ID = -8,
                            IsPositive = true,
                            Name = "Relaxed"
                        },
                        new
                        {
                            ID = -7,
                            IsPositive = true,
                            Name = "Energetic"
                        },
                        new
                        {
                            ID = -6,
                            IsPositive = true,
                            Name = "Excited"
                        },
                        new
                        {
                            ID = -5,
                            IsPositive = false,
                            Name = "Sick"
                        },
                        new
                        {
                            ID = -4,
                            IsPositive = false,
                            Name = "Sad"
                        },
                        new
                        {
                            ID = -3,
                            IsPositive = false,
                            Name = "Stressed"
                        },
                        new
                        {
                            ID = -2,
                            IsPositive = false,
                            Name = "Anxious"
                        },
                        new
                        {
                            ID = -1,
                            IsPositive = false,
                            Name = "Tired"
                        });
                });

            modelBuilder.Entity("WellnessTracker.Models.User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("IsDiabetic")
                        .HasColumnType("bool");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ID");

                    b.ToTable("user");
                });

            modelBuilder.Entity("WellnessTracker.Models.Allergen_Entry", b =>
                {
                    b.HasOne("WellnessTracker.Models.Allergen", "Allergen")
                        .WithMany("AllergenEntries")
                        .HasForeignKey("AllergenID")
                        .HasConstraintName("FK_Allergen_Allergen_Entry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WellnessTracker.Models.Entry", "Entry")
                        .WithMany("EntryAllergens")
                        .HasForeignKey("EntryID")
                        .HasConstraintName("FK_Entry_Allergen_Entry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WellnessTracker.Models.Entry", b =>
                {
                    b.HasOne("WellnessTracker.Models.Category", "EntryCategory")
                        .WithMany("Entries")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK_Category_Entry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WellnessTracker.Models.Status", "EntryStatus")
                        .WithMany("Entries")
                        .HasForeignKey("StatusID")
                        .HasConstraintName("FK_Status_Entry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WellnessTracker.Models.User", "ApplicationUser")
                        .WithMany("Entries")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_User_Entry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
