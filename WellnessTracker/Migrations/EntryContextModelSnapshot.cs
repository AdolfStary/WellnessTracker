// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WellnessTracker.Models;

namespace WellnessTracker.Migrations
{
    [DbContext(typeof(EntryContext))]
    partial class EntryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WellnessTracker.Models.Allergen", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ID");

                    b.ToTable("allergen");
                });

            modelBuilder.Entity("WellnessTracker.Models.Allergen_Entry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<int>("AllergenID")
                        .HasColumnType("int(10)");

                    b.Property<int>("EntryID")
                        .HasColumnType("int(10)");

                    b.HasKey("ID");

                    b.HasIndex("AllergenID")
                        .HasName("FK_Allergen_Allergen_Entry");

                    b.HasIndex("EntryID")
                        .HasName("FK_Entry_Allergen_Entry");

                    b.ToTable("Allergen_Entry");
                });

            modelBuilder.Entity("WellnessTracker.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("WellnessTracker.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ID");

                    b.ToTable("category");
                });

            modelBuilder.Entity("WellnessTracker.Models.Entry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<double>("BG")
                        .HasColumnType("double(5, 1)");

                    b.Property<int>("Carbs")
                        .HasColumnType("int(4)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int(10)");

                    b.Property<int>("Fats")
                        .HasColumnType("int(4)");

                    b.Property<double>("Insulin")
                        .HasColumnType("double(5, 1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bool");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int>("Protein")
                        .HasColumnType("int(4)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int(10)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.Property<int>("UserID")
                        .HasColumnType("int(10)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID")
                        .HasName("FK_Category_Entry");

                    b.HasIndex("StatusID")
                        .HasName("FK_Status_Entry");

                    b.HasIndex("UserID")
                        .HasName("FK_ApplicationUser_Entry");

                    b.ToTable("entry");
                });

            modelBuilder.Entity("WellnessTracker.Models.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("bool");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("ID");

                    b.ToTable("status");
                });

            modelBuilder.Entity("WellnessTracker.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<string>("IsDiabetic")
                        .IsRequired()
                        .HasColumnType("bool");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("ID");

                    b.ToTable("user");
                });

            modelBuilder.Entity("WellnessTracker.Models.Allergen_Entry", b =>
                {
                    b.HasOne("WellnessTracker.Models.Allergen", "Allergen")
                        .WithMany("AllergenEntries")
                        .HasForeignKey("AllergenID")
                        .HasConstraintName("FK_Allergen_Allergen_Entry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WellnessTracker.Models.Entry", "Entry")
                        .WithMany("EntryAllergens")
                        .HasForeignKey("EntryID")
                        .HasConstraintName("FK_Entry_Allergen_Entry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WellnessTracker.Models.Entry", b =>
                {
                    b.HasOne("WellnessTracker.Models.Category", "EntryCategory")
                        .WithMany("Entries")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK_Category_Entry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WellnessTracker.Models.Status", "EntryStatus")
                        .WithMany("Entries")
                        .HasForeignKey("StatusID")
                        .HasConstraintName("FK_Status_Entry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WellnessTracker.Models.User", "ApplicationUser")
                        .WithMany("Entries")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_ApplicationUser_Entry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
